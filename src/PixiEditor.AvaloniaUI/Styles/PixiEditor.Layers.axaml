<Styles xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ui="clr-namespace:PixiEditor.Helpers.UI"
                    xmlns:ui1="clr-namespace:PixiEditor.AvaloniaUI.Helpers.UI"
                    xmlns:converters="clr-namespace:PixiEditor.AvaloniaUI.Helpers.Converters">

    <Styles.Resources>
        <Color x:Key="SelectedLayerColor">#505056</Color>
        <Color x:Key="SoftSelectedLayerColor">#7D505056</Color>

        <SolidColorBrush x:Key="SelectedLayerBrush" Color="{DynamicResource SelectedLayerColor}" />
        <SolidColorBrush x:Key="SoftSelectedLayerBrush" Color="{DynamicResource SoftSelectedLayerColor}" />

        <ControlTheme x:Key="TreeViewItemTheme" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0,0,0,0"/>
        <!--TODO: systemcolors-->
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
        <!--<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>-->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <ui:ReversedOrderStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="15" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander"
                                      Classes="ExpandCollapseToggleStyle"
                                      ClickMode="Press"
                                      IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" />
                        <Border x:Name="Bd" Grid.Column="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Content="{TemplateBinding Header}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="1"
                                        ui1:TreeViewItemHelper.Indent="{Binding Path=(ui1:TreeViewItemHelper.Indent), Mode=OneWay, RelativeSource={RelativeSource AncestorType=ItemsPresenter}, Converter={converters:IndentConverter}}"/>
                    </Grid>
                    <!--TODO: Implement below-->
                    <!--<Interaction.Behaviors>
                        <DataTriggerBehavior Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                            <Style Selector="TreeViewItem #ItemsHost">
                                <Setter Property="IsVisible" Value="False"/>
                            </Style>
                        </DataTriggerBehavior>
                        <DataTriggerBehavior Binding="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                        <Style Selector="TreeViewItem #ItemsHost">
                            <Setter Property="IsVisible" Value="True"/>
                        </Style>
                        </DataTriggerBehavior>
                        <DataTriggerBehavior Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Items.Empty}" Value="True">
                            <Style Selector="TreeViewItem #Expander">
                                <Setter Property="IsVisible" Value="False"/>
                            </Style>
                        </DataTriggerBehavior>
                    </Interaction.Behaviors>-->
                    <!--<ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasItems" Value="True"/>
                                <Condition Property="IsSelected" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </ControlTheme>
    </Styles.Resources>
</Styles>
